package converter

import (
	"encoding/json"
	"log"
	"regexp"
	"time"
)

type goVeSensorTelemetryMessage struct {
	Time     string
	NextTele string
	TimeZone string
	Model    string
	Values   map[string]struct {
		Value float64
		Unit  string
	}
}

type goVeSensorOutputMessage struct {
	timeStamp   time.Time
	measurement string
	device      string
	field       string
	unit        string
	model       string
	value       float64
}

// example input: piegn/tele/ve/24v-bmv
// -> use 24v-bmv as device identifier
var topicMatcher = regexp.MustCompile("^(.*)/([^/]*)$")

func init() {
	registerHandler("go-ve-sensor", goVeSensorHandler)
}

// parses messages generated by the go-ve-sensors tool in the format given by goVeSensorTelemetryMessage
// and write one point per value to the influxdb
// example input:
// {
//   "Time":"2019-01-05T16:20:53",
//   "NextTele":"2019-01-05T16:21:03",
//   "TimeZone":"UTC",
//   "Model":"bmv700",
//   "Values":{
//     "AmountOfChargedEnergy":{"Value":756.6,"Unit":"kWh"},
//     "AmountOfDischargedEnergy":{"Value":363.1,"Unit":"kWh"},
//     "AuxVoltage":{"Value":655.35,"Unit":"V"},
//     "AuxVoltageMaximum":{"Value":16.08,"Unit":"V"},
//     "AuxVoltageMinimum":{"Value":-0.04,"Unit":"V"},
//     "Consumed":{"Value":-2.2,"Unit":"Ah"},
//     "CumulativeAmpHours":{"Value":-35113,"Unit":"Ah"},
//     "Current":{"Value":-0.9,"Unit":"A"},
//     "DepthOfTheAverageDischarge":{"Value":-60,"Unit":"Ah"},
//     "DepthOfTheDeepestDischarge":{"Value":-320,"Unit":"Ah"},
//     "DepthOfTheLastDischarge":{"Value":-2,"Unit":"Ah"},
//     "HoursSinceFullCharge":{"Value":2.8,"Unit":"h"},
//     "MainVoltage":{"Value":24.91,"Unit":"V"},
//     "MainVoltageMaximum":{"Value":30.98,"Unit":"V"},
//     "MainVoltageMinimum":{"Value":9.5,"Unit":"V"},
//     "MidPointVoltage":{"Value":12.47,"Unit":"V"},
//     "MidPointVoltageDeviation":{"Value":0.2,"Unit":"%"},
//     "NumberOfAutomaticSynchronizations":{"Value":205,"Unit":""},
//     "NumberOfCycles":{"Value":142,"Unit":""},
//     "NumberOfFullDischarges":{"Value":10,"Unit":""},
//     "NumberOfHighMainVoltageAlarms":{"Value":12,"Unit":""},
//     "NumberOfLowMainVoltageAlarms":{"Value":224,"Unit":""},
//     "Power":{"Value":-23,"Unit":"W"},
//     "StateOfCharge":{"Value":100,"Unit":"%"},
//     "Temperature":{"Value":655.4,"Unit":"K"},
//     "TimeToGo":{"Value":14400,"Unit":"min"}
//   }
// }
func goVeSensorHandler(c Config, input Input, outputFunc OutputFunc) {
	// parse topic
	matches := topicMatcher.FindStringSubmatch(input.Topic())
	if len(matches) < 3 {
		log.Printf("go-ve-sensor[%s]: cannot extract device from topic='%s", c.Name(), input.Topic())
		return
	}
	device := matches[2]

	// parse payload
	var message goVeSensorTelemetryMessage
	if err := json.Unmarshal(input.Payload(), &message); err != nil {
		log.Printf("go-ve-sensor[%s]: cannot json decode: %s", c.Name(), err)
		return
	}

	timeStamp, err := parseTime(message.Time)
	if err != nil {
		timeStamp = time.Now()
	}

	if message.TimeZone != "UTC" {
		log.Printf("go-ve-sensor[%s]: TimeZone='%s' but only 'UTC' is supported", c.Name(), message.TimeZone)
	}

	for field, value := range message.Values {
		outputFunc(goVeSensorOutputMessage{
			timeStamp:   timeStamp,
			measurement: c.TargetMeasurement(),
			device:      device,
			field:       field,
			unit:        value.Unit,
			model:       message.Model,
			value:       value.Value,
		})
	}
}

func (m goVeSensorOutputMessage) Measurement() string {
	return m.measurement
}

func (m goVeSensorOutputMessage) Tags() map[string]string {
	return map[string]string{
		"device": m.device,
		"field":  m.field,
		"unit":   m.unit,
		"sensor": m.model,
	}
}

func (m goVeSensorOutputMessage) Fields() map[string]interface{} {
	return map[string]interface{}{
		"value": m.value,
	}
}

func (m goVeSensorOutputMessage) Time() time.Time {
	return m.timeStamp
}
